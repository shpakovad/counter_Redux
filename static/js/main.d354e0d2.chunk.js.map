{"version":3,"sources":["SettingsScreen.js","Btns.js","settingsBtnsBlock.js","SettingsCounter.js","Screen.js","BtnsBlock.js","Counter.js","reducer.js","App.js","serviceWorker.js","store.js","index.js"],"names":["SettingsScreen","render","classIncorrectMaxValueInput","props","errorMax","classIncorrectMinValueInput","errorMin","className","type","value","maxValue","onChange","onMaxValue","onClick","onClickCounterValue","minValue","onMinValue","React","Component","Btns","set","onSet","disabled","isButtonSet","inc","reset","onInc","isButtonInc","onReset","isButtonReset","SettingsBtnsBlock","SettingsCounter","Screen","classForNumber","numberNewColor","counter","BtnsBlock","Counter","initialState","reducer","state","action","newMinValue","setMinValue","setMaxValue","resetCounterValue","App","btns","onSetRedux","onIsButtonSet","onIsButtonInc","onIsButtonReset","setIncrement","setNumberNewColor","onResetCounter","e","Number","target","onMinValueRedux","onMaxValueRedux","setErrorMax","setErrorMin","onSetEnteredValue","onSetIncorrectValue","ConnectedApp","connect","dispatch","onIsButtonSetAC","onIsButtonIncAC","onIsButtonResetAC","onSetReduxAC","onMinValueReduxAC","onMaxValueReduxAC","setNumberNewColorAC","setErrorMaxAC","setErrorMinAC","setIncrementAC","onResetCounterAC","Boolean","window","location","hostname","match","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d354e0d2.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass SettingsScreen extends React.Component {\n\n    render = () => {\n        let classIncorrectMaxValueInput = this.props.errorMax === true ? 'maxValue error' : 'maxValue';\n        let classIncorrectMinValueInput = this.props.errorMin === true ? 'minValue error' : 'minValue';\n        return (\n            <div className='settingsScreen'>\n                <span className='maxValueString'> <em> max value: </em></span>\n                <input className={classIncorrectMaxValueInput} type=\"number\"\n                       value={this.props.maxValue}\n                       onChange={this.props.onMaxValue}\n                       onClick={this.props.onClickCounterValue}\n                />\n                <span className='minValueString'> <em> min value: </em></span>\n                <input className={classIncorrectMinValueInput} type=\"number\"\n                       value={this.props.minValue}\n                       onChange={this.props.onMinValue}\n                       onClick={this.props.onClickCounterValue}\n                />\n            </div>\n        );\n    }\n}\n\nexport default SettingsScreen;\n\n","import React from 'react';\nimport './App.css';\n\n\n\nclass Btns extends React.Component {\n\n\n\n  render = () => {\n    return (\n      <div className='btns'>\n        {\n          this.props.set &&\n           <button className='set' onClick={this.props.onSet} disabled={this.props.isButtonSet}> {this.props.set}   </button>\n        }\n        {this.props.inc && this.props.reset && <div>\n          <button onClick={this.props.onInc} disabled={this.props.isButtonInc}\n            className='inc disabled'> {this.props.inc} </button>\n\n          <button className='reset' onClick={this.props.onReset}  disabled={this.props.isButtonReset}\n          > {this.props.reset} </button>\n        </div>\n        }\n      </div>\n    );\n  }\n}\nexport default Btns;\n\n\n","import React from 'react';\nimport Btns from './Btns';\n\n\nclass SettingsBtnsBlock extends React.Component {\n\n  render = () => {\n    return (\n      <div className='settingsBtnsBlock'>\n        <Btns set={this.props.set}\n          onSet={this.props.onSet}\n          isButtonSet={this.props.isButtonSet}\n  \n \n        />\n      </div>\n    );\n  }\n}\nexport default SettingsBtnsBlock;\n\n","import React from 'react';\nimport SettingsScreen from './SettingsScreen';\nimport SettingsBtnsBlock from './settingsBtnsBlock'\n\n\nclass SettingsCounter extends React.Component {\n\n\n    render = () => {\n        return (\n            <div className='wrapperSettingsCounter'>\n                <SettingsScreen minValue={this.props.minValue}\n                                onMinValue={this.props.onMinValue}\n                                maxValue={this.props.maxValue}\n                                onMaxValue={this.props.onMaxValue}\n                                onClickCounterValue={this.props.onClickCounterValue}\n                                errorMax={this.props.errorMax}\n                                errorMin={this.props.errorMin}\n                />\n                <SettingsBtnsBlock set={this.props.set}\n                                   onSet={this.props.onSet}\n                                   isButtonSet={this.props.isButtonSet}\n                />\n            </div>\n        );\n    }\n}\n\nexport default SettingsCounter;\n\n","import React from 'react';\nimport './App.css';\n\n\nclass Screen extends React.Component {\n\n    render = () => {\n        let classForNumber = (this.props.numberNewColor === true) ? 'numberNewColor' : ((this.props.errorMax === true) || (this.props.errorMin === true)) ? 'errorText' : 'number';\n        return (\n            <div className='screen'>\n                <div className={classForNumber}> {this.props.counter}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Screen;\n","import React from 'react';\nimport './App.css';\nimport Btns from './Btns';\n\n\n\n\nclass BtnsBlock extends React.Component {\n\n  render = () => {\n    return (\n      <div className='btnsBlock'>\n        <Btns reset={this.props.reset}\n          inc={this.props.inc}\n          onInc={this.props.onInc}\n          onReset={this.props.onReset}\n          isButtonInc={this.props.isButtonInc}\n          counter={this.props.counter}\n          isButtonReset={this.props.isButtonReset}\n        />\n      </div>\n    );\n  }\n}\nexport default BtnsBlock;\n\n","import React from 'react';\nimport './App.css';\nimport Screen from './Screen';\nimport BtnsBlock from './BtnsBlock';\n\n\nclass Counter extends React.Component {\n\n    render = () => {\n        return (\n            <div className='wrapperCounter'>\n                <Screen counter={this.props.counter}\n                        numberNewColor={this.props.numberNewColor}\n                        errorMax={this.props.errorMax}\n                        errorMin={this.props.errorMin}\n                />\n                <BtnsBlock reset={this.props.reset}\n                           inc={this.props.inc}\n                           onInc={this.props.onInc}\n                           onReset={this.props.onReset}\n                           isButtonInc={this.props.isButtonInc}\n                           counter={this.props.counter}\n                           isButtonReset={this.props.isButtonReset}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n\n","export const ON_SET = 'ON_SET';\r\nexport const ON_MINVALUE = 'ON_MINVALUE';\r\nexport const ON_MAXVALUE = 'ON_MAXVALUE';\r\nexport const BUTTON_INC = 'BUTTON_INC';\r\nexport const BUTTON_RESET = 'BUTTON_RESET';\r\nexport const BUTTON_SET = 'BUTTON_SET';\r\nexport const NUMBER_COLOR = 'NUMBER_COLOR';\r\nexport const ERROR_MAX = 'ERROR_MAX';\r\nexport const ERROR_MIN = 'ERROR_MIN';\r\nexport const INCREMENT = 'INCREMENT';\r\nexport const RESET_COUNTER = 'RESET_COUNTER';\r\nexport const INCORRECT_VALUE_COUNTER = 'INCORRECT_VALUE_COUNTER';\r\nexport const ENTERED_VALUE_COUNTER = 'ENTERED_VALUE_COUNTER';\r\n\r\nconst initialState = {\r\n    maxValue: 0,\r\n    minValue: 0,\r\n    counter: \"Enter value and press 'Set'\",\r\n    isButtonInc: false,\r\n    numberNewColor: false,\r\n    errorMax: false,\r\n    errorMin: false,\r\n    isButtonSet: true,\r\n    isButtonReset: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case BUTTON_SET:\r\n            return {\r\n                ...state,\r\n                isButtonSet: action.isButtonSet\r\n            };\r\n        case BUTTON_INC:\r\n            return {\r\n                ...state,\r\n                isButtonInc: action.isButtonInc\r\n            };\r\n        case BUTTON_RESET:\r\n            return {\r\n                ...state,\r\n                isButtonReset: action.isButtonReset\r\n            };\r\n        case ON_SET:\r\n            return {\r\n                ...state,\r\n                counter: action.newMinValue,\r\n            };\r\n        case ON_MINVALUE:\r\n            return {\r\n                ...state,\r\n                minValue: action.setMinValue\r\n            };\r\n        case ON_MAXVALUE:\r\n            return {\r\n                ...state,\r\n                maxValue: action.setMaxValue\r\n            };\r\n        case NUMBER_COLOR:\r\n            return {\r\n                ...state,\r\n                numberNewColor: action.numberNewColor\r\n            };\r\n        case ERROR_MAX:\r\n            return {\r\n                ...state,\r\n                errorMax: action.errorMax\r\n            };\r\n        case ERROR_MIN:\r\n            return {\r\n                ...state,\r\n                errorMin: action.errorMin\r\n            };\r\n        case INCREMENT:\r\n            return {\r\n                ...state,\r\n                counter: action.counter+1,\r\n            };\r\n        case RESET_COUNTER:\r\n            return {\r\n                ...state,\r\n                counter: action.resetCounterValue\r\n            };\r\n        case INCORRECT_VALUE_COUNTER:\r\n            return {\r\n                ...state,\r\n                counter: \"Incorrect Value!\"\r\n            };\r\n        case ENTERED_VALUE_COUNTER:\r\n            return {\r\n                ...state,\r\n                counter: \"Enter value and press 'Set'\"\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const onIsButtonSetAC = (isButtonSet) => {\r\n    return {type: BUTTON_SET, isButtonSet}\r\n};\r\nexport const onIsButtonIncAC = (isButtonInc) => {\r\n    return {type: BUTTON_INC, isButtonInc}\r\n};\r\nexport const onIsButtonResetAC = (isButtonReset) => {\r\n    return {type: BUTTON_RESET, isButtonReset}\r\n};\r\nexport const onSetReduxAC = (newMinValue, isButtonInc, isButtonReset, isButtonSet) => {\r\n    return {type: ON_SET, newMinValue, isButtonInc, isButtonReset, isButtonSet}\r\n};\r\nexport const onMinValueReduxAC = (setMinValue) => {\r\n    return {type: ON_MINVALUE, setMinValue}\r\n};\r\nexport const onMaxValueReduxAC = (setMaxValue) => {\r\n    return {type: ON_MAXVALUE, setMaxValue}\r\n};\r\nexport const setNumberNewColorAC = (numberNewColor) => {\r\n    return {type: NUMBER_COLOR, numberNewColor}\r\n};\r\nexport const setErrorMaxAC = (errorMax) => {\r\n    return {type: ERROR_MAX, errorMax}\r\n};\r\nexport const setErrorMinAC = (errorMin) => {\r\n    return {type: ERROR_MIN, errorMin}\r\n};\r\nexport const setIncrementAC = (counter) => {\r\n    return {type: INCREMENT,counter}\r\n};\r\nexport const onResetCounterAC = (resetCounterValue) => {\r\n    return {type: RESET_COUNTER, resetCounterValue}\r\n};\r\nexport const onSetIncorrectValueAC = () => {\r\n    return {type: INCORRECT_VALUE_COUNTER}\r\n};\r\nexport const onSetEnteredValueAC = () => {\r\n    return {type: ENTERED_VALUE_COUNTER}\r\n};\r\n\r\nexport default (reducer)","import React from 'react';\nimport './App.css';\nimport SettingsCounter from './SettingsCounter';\nimport Counter from './Counter';\nimport {connect} from \"react-redux\";\nimport {\n    onIsButtonIncAC, onIsButtonResetAC, onIsButtonSetAC,\n    onMaxValueReduxAC, onMinValueReduxAC, onResetCounterAC,\n    onSetEnteredValueAC, onSetIncorrectValueAC, onSetReduxAC,\n    setErrorMaxAC, setErrorMinAC, setIncrementAC, setNumberNewColorAC\n} from \"./reducer\";\n\n\nclass App extends React.Component {\n\n    btns = {reset: \"reset\", inc: \"inc\", set: \"set\"};\n\n    //при клике на set значение выбранного мин значения перебрасывается на screen\n    onSet = () => {\n        let newMinValue = this.props.minValue;\n        this.props.onSetRedux(newMinValue);\n        this.props.onIsButtonSet(true);\n        this.props.onIsButtonInc(false);\n        this.props.onIsButtonReset(false);\n    };\n\n    //при достижении макс знач-я кнопка inc блокируется\n    onInc = () => {\n        this.props.setIncrement(this.props.counter);\n        if (this.props.counter === this.props.maxValue - 1) {\n            this.props.onIsButtonInc(true);\n            this.props.setNumberNewColor(true)\n        }\n    };\n\n    //сбрасывает при достижении макс значения\n    onReset = () => {\n        this.props.onIsButtonInc(false);\n        this.props.setNumberNewColor(false);\n        let resetCounterValue = this.props.minValue;\n        this.props.onResetCounter(resetCounterValue)\n    };\n\n    //событие с мин и макс значениями\n    onMinValue = (e) => {\n        let setMinValue = Number(e.target.value);\n        this.props.onMinValueRedux(setMinValue)\n    };\n    onMaxValue = (e) => {\n        let setMaxValue = Number(e.target.value);\n        this.props.onMaxValueRedux(setMaxValue)\n    };\n\n    //меняется значение сетчика, в том числе при некорректном вводе. Так же блокируются кновки inc,reset\n    onClickCounterValue = () => {\n        this.props.onIsButtonSet(false);\n        this.props.onIsButtonInc(true);\n        this.props.onIsButtonReset(true);\n        this.props.setErrorMax(false);\n        this.props.setErrorMin(false);\n        this.props.onSetEnteredValue();\n        if (this.props.maxValue <= -1) {\n            this.props.onIsButtonSet(true);\n            this.props.setErrorMax(true);\n            this.props.setErrorMin(false);\n            this.props.onSetIncorrectValue()\n        }\n        if (this.props.minValue <= -1) {\n            this.props.onIsButtonSet(true);\n            this.props.setErrorMax(false);\n            this.props.setErrorMin(true);\n            this.props.onSetIncorrectValue()\n        }\n        if (this.props.minValue >= this.props.maxValue) {\n            this.props.onIsButtonSet(true);\n            this.props.setErrorMax(true);\n            this.props.setErrorMin(true);\n            this.props.onSetIncorrectValue()\n        }\n    };\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <SettingsCounter set={this.btns.set}\n                                 onSet={this.onSet}\n                                 minValue={this.props.minValue}\n                                 onMinValue={this.onMinValue}\n                                 maxValue={this.props.maxValue}\n                                 onMaxValue={this.onMaxValue}\n                                 onClickCounterValue={this.onClickCounterValue}\n                                 errorMax={this.props.errorMax}\n                                 errorMin={this.props.errorMin}\n                                 isButtonSet={this.props.isButtonSet}\n                />\n                <Counter counter={this.props.counter}\n                         reset={this.btns.reset}\n                         inc={this.btns.inc}\n                         onInc={this.onInc}\n                         onReset={this.onReset}\n                         isButtonInc={this.props.isButtonInc}\n                         numberNewColor={this.props.numberNewColor}\n                         errorMax={this.props.errorMax}\n                         errorMin={this.props.errorMin}\n                         isButtonReset={this.props.isButtonReset}\n                />\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        counter: state.counter,\n        minValue: state.minValue,\n        isButtonSet: state.isButtonSet,\n        isButtonInc: state.isButtonInc,\n        isButtonReset: state.isButtonReset,\n        maxValue: state.maxValue,\n        numberNewColor: state.numberNewColor,\n        errorMax: state.errorMax,\n        errorMin: state.errorMin\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        onIsButtonSet(isButtonSet) {\n            const action = onIsButtonSetAC(isButtonSet);\n            dispatch(action)\n        },\n        onIsButtonInc(isButtonInc) {\n            const action = onIsButtonIncAC(isButtonInc);\n            dispatch(action)\n        },\n        onIsButtonReset(isButtonReset) {\n            const action = onIsButtonResetAC(isButtonReset);\n            dispatch(action)\n        },\n        onSetRedux(newMinValue) {\n            const action = onSetReduxAC(newMinValue);\n            dispatch(action)\n        },\n        onMinValueRedux(setMinValue) {\n            const action = onMinValueReduxAC(setMinValue);\n            dispatch(action)\n        },\n        onMaxValueRedux(setMaxValue) {\n            const action = onMaxValueReduxAC(setMaxValue);\n            dispatch(action)\n        },\n        setNumberNewColor(numberNewColor) {\n            const action = setNumberNewColorAC(numberNewColor);\n            dispatch(action)\n        },\n        setErrorMax(errorMax) {\n            const action = setErrorMaxAC(errorMax);\n            dispatch(action)\n        },\n        setErrorMin(errorMin) {\n            const action = setErrorMinAC(errorMin);\n            dispatch(action)\n        },\n        setIncrement(counter) {\n            const action = setIncrementAC(counter);\n            dispatch(action)\n        },\n        onResetCounter(resetCounterValue) {\n            const action = onResetCounterAC(resetCounterValue);\n            dispatch(action)\n        },\n        onSetIncorrectValue() {\n            const action = onSetIncorrectValueAC();\n            dispatch(action)\n        },\n        onSetEnteredValue() {\n            const action = onSetEnteredValueAC();\n            dispatch(action)\n        },\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\n\r\n\r\nconst store=createStore(reducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}